import org.gradle.plugins.ide.eclipse.model.AbstractLibrary
import org.gradle.plugins.ide.eclipse.model.internal.FileReferenceFactory

plugins {
	alias(libs.plugins.publish) apply false
	alias(libs.plugins.test.logger) apply false
	alias(libs.plugins.licenser) apply false
}

wrapper {
	gradleVersion = '7.6'
	distributionType = Wrapper.DistributionType.ALL
}

subprojects {
	apply plugin: 'com.adarshr.test-logger'
	apply plugin: 'org.cadixdev.licenser'
	apply plugin: 'maven-publish'
	apply plugin: 'java-library'
	apply plugin: 'eclipse'
	apply plugin: 'jacoco'
	
	if(project.name != "core" && project.name != "testing")
	{
		apply plugin: 'com.gradle.plugin-publish'
		apply plugin: 'java-gradle-plugin'
	}
	
	if(project.name != "core") {
		tasks.withType(Javadoc).all { enabled = false }
	}

	
	apply from: '../gradle/script.utils.gradle'

	group = "net.galacticraft"
	
	java {
	    toolchain {
	        languageVersion = JavaLanguageVersion.of(8)
	        vendor = JvmVendorSpec.ADOPTIUM
	    }
	}
	
	sourceSets {
		test {
			java.srcDirs('src/test/java')
			resources.srcDirs('src/test/resources')
		}
	}
	
	configurations {
		implementation.extendsFrom suite
		compileOnly.extendsFrom includedSuite
	}

	configurations.suite {
		resolutionStrategy {
			cacheChangingModulesFor 0, 'seconds'
			cacheDynamicVersionsFor 0, 'seconds'
		}
	}
	
	dependencies {
		compileOnly gradleApi()

		implementation libs.annotations
		
		compileOnly libs.lombok
		annotationProcessor libs.lombok
		testCompileOnly libs.lombok
		testAnnotationProcessor libs.lombok

		testImplementation libs.assertj
		testImplementation libs.junit.api
		testImplementation libs.junit.params
		testImplementation libs.mockito
		testRuntimeOnly libs.junit.engine
	}

	license {
		header = rootProject.file("HEADER.txt")
		include '**/*.java'
		properties {
			name = "${projectName}"
			organization = "${organization}"
			url = "${url}"
		}
	}

	tasks.withType(Copy).all {
		duplicatesStrategy 'exclude'
	}
	
	apply from: '../gradle/script.jacoco.gradle'

	def srcFolder = file("C:\\gradle\\gradle-${project.gradle.gradleVersion}\\src")

	eclipse {
		classpath {
			file {
				whenMerged { classpath ->
					String version = project.gradle.gradleVersion
					String gradleSourceDirectory = srcFolder.getAbsolutePath()
					classpath.entries.each { entry ->
						if (entry in AbstractLibrary && entry.library.path.contains('generated-gradle-jars')) {
							entry.sourcePath =
									new FileReferenceFactory().fromPath(gradleSourceDirectory)
						}
					}
				}
			}
		}
	}

	checkLicenseMain.dependsOn licenseFormat

	tasks.named("build").configure {
	    build {
	        println "Building ${project.name} | Version: ${project.version}"
	    }
	}
	
	publishing {
		repositories {
			maven {
				name 'GCGradlePlugins'
				url 'https://maven.galacticraft.net/repository/gradle-plugins/'
				credentials {
					username = project.hasProperty('NEXUS_USERNAME') ? project.NEXUS_USERNAME : ''
					password = project.hasProperty('NEXUS_PASSWORD') ? project.NEXUS_PASSWORD : ''
				}
			}
		}
	}

	ext {
		excludeGroup = [
			'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA',
			'META-INF/LICENSE*', 'META-INF/DEPENDENCIES',
			'META-INF/NOTICE*', 'META-INF/versions/**',
			'META-INF/maven/**', 'Log4j*', '_EMPTY_',
			'LICENSE.*', 'META-INF/*.kotlin_module',
			'META-INF/services/**', 'META-INF/com.android.tools/**',
			'module-info.class', 'licenses', 'kotlin'
		]
		
		setMainManifestProps = { Manifest manifest->
			manifest.attributes (
					'Implementation-Title'        : "${projectName}",
					'Implementation-Version'      : project.version,
					'Implementation-Vendor'       : "${organization}",
					'Implementation-Timestamp'    : new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
					)
		}
	}
}

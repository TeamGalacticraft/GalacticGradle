plugins {
	id "org.shipkit.shipkit-changelog" version "1.1.15" apply false
	id "com.gradle.plugin-publish" version "1.0.0-rc-1" apply false
	id "com.adarshr.test-logger" version "3.2.0" apply false
	id 'org.cadixdev.licenser' version '0.6.1' apply false
}

wrapper {
    gradleVersion = '7.4.2'
    distributionType = Wrapper.DistributionType.ALL
}

subprojects {
	apply plugin: 'org.cadixdev.licenser'
    apply plugin: 'maven-publish'
    apply plugin: 'java-library'
    apply plugin: 'eclipse'
    apply plugin: 'jacoco'

	ext {
		notSnapshot = { !version.endsWith('-SNAPSHOT') }
	}

	group = "net.galacticraft"
	version = "1.0.5-SNAPSHOT"

    java.toolchain.languageVersion = JavaLanguageVersion.of(8)

    repositories {
        maven { url 'https://repo.galacticraft.net/repository/maven/' }
        maven { url 'https://repo.galacticraft.net/repository/common-proxy/' }
    }

	dependencies {
		implementation gradleApi()
		compileOnly 'com.google.guava:guava:31.0.1-jre'
		implementation "org.jetbrains:annotations:23.0.0"
		implementation 'org.checkerframework:checker-qual:3.17.0'
		compileOnly 'org.projectlombok:lombok:1.18.24'
		annotationProcessor 'org.projectlombok:lombok:1.18.24'
		testCompileOnly 'org.projectlombok:lombok:1.18.24'
		testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'
	}

	license {
		header = rootProject.file("HEADER.txt")
		properties {
			name = "${projectName}"
			organization = "${organization}"
			url = "${url}"
		}
	}

	jacocoTestReport{
		reports {
			xml.required = true
		}
		dependsOn test
	}

	test {
		useJUnitPlatform()
		finalizedBy jacocoTestReport
	}
		
	eclipse {
		classpath {
			file {
				whenMerged { classpath ->
					String gradleHome = gradle.getGradleHomeDir()
							.absolutePath
							.replace(File.separator, '/')
					String gradleSourceDirectory = "${gradleHome}/src"
					classpath.entries.each { entry ->
						if (entry in org.gradle.plugins.ide.eclipse.model.AbstractLibrary
								&& entry.library.path.contains('generated-gradle-jars')) {
							entry.sourcePath =
									new org.gradle.plugins.ide.eclipse.model.internal.FileReferenceFactory()
									.fromPath(gradleSourceDirectory)
						}
					}
				}
			}
		}
	}
	checkLicenseMain.dependsOn licenseFormat

	ext {
		MANIFEST = manifest{
	        attributes([
				'Specification-Title'         : "${projectName}",
				'Specification-Vendor'        : "${organization}",
				'Specification-Version'       : "${version}",
				'Implementation-Title'        : "${projectName}",
				'Implementation-Version'      : "${version}",
				'Implementation-Vendor'       : "${organization}",
				'Implementation-Timestamp'    : new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
	        ] as LinkedHashMap)
	    }
	}
}

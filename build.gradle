plugins {
	id "org.shipkit.shipkit-changelog" version "1.1.15" apply false
	id "com.gradle.plugin-publish" version "1.0.0" apply false
	id "com.adarshr.test-logger" version "3.2.0" apply false
	id 'org.cadixdev.licenser' version '0.7.0-SNAPSHOT' apply false
}

wrapper {
	gradleVersion = '7.5.1'
	distributionType = Wrapper.DistributionType.ALL
}

apply from: 'shared.gradle'

subprojects {
	apply plugin: 'org.cadixdev.licenser'
	apply plugin: 'maven-publish'
	apply plugin: 'java-library'
	apply plugin: 'eclipse'
	apply plugin: 'jacoco'

	java.toolchain.languageVersion = JavaLanguageVersion.of(8)

	sourceSets {
		test {
			java.srcDirs("src/test/java")
			resources.srcDirs("src/test/resources")
		}
	}
	
	configurations {
		compileOnly.extendsFrom common
	}

	repositories {
		maven { url 'https://maven.galacticraft.net/repository/maven-public/' }
		mavenLocal()
	}

	dependencies {
		implementation gradleApi()

		compileOnly 'com.google.guava:guava:31.0.1-jre'
		implementation "org.jetbrains:annotations:23.0.0"
		implementation 'org.checkerframework:checker-qual:3.17.0'
		compileOnly 'org.projectlombok:lombok:1.18.24'
		annotationProcessor 'org.projectlombok:lombok:1.18.24'
		testCompileOnly 'org.projectlombok:lombok:1.18.24'
		testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'

		testImplementation 'org.assertj:assertj-core:3.23.1'
		testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.1'
		testImplementation 'org.junit.jupiter:junit-jupiter-params:5.9.1'
		testImplementation 'org.mockito:mockito-core:4.8.0'
		testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.1'
	}

	license {
		header = rootProject.file("HEADER.txt")
		properties {
			name = "${projectName}"
			organization = "${organization}"
			url = "${url}"
		}
	}

	tasks.withType(Javadoc) {
		failOnError false
	}

	tasks.withType(Copy).all {
		duplicatesStrategy 'exclude'
	}
	
	jacocoTestReport{
		reports {
			xml.required = true
		}
		dependsOn test
	}

	test {
		useJUnitPlatform()
		finalizedBy jacocoTestReport
	}

	def srcFolder = file("C:\\gradle\\gradle-${project.gradle.gradleVersion}\\src")

	eclipse {
		classpath {
			file {
				whenMerged { classpath ->
					String version = project.gradle.gradleVersion
					String gradleSourceDirectory = srcFolder.getAbsolutePath()
					classpath.entries.each { entry ->
						if (entry in org.gradle.plugins.ide.eclipse.model.AbstractLibrary
								&& entry.library.path.contains('generated-gradle-jars')) {
							entry.sourcePath =
									new org.gradle.plugins.ide.eclipse.model.internal.FileReferenceFactory()
									.fromPath(gradleSourceDirectory)
						}
					}
				}
			}
		}
	}

	checkLicenseMain.dependsOn licenseFormat

	ext {
		setMainManifestProps = { Manifest manifest->
			manifest.attributes (
					'Implementation-Title'        : "${projectName}",
					'Implementation-Version'      : project.version,
					'Implementation-Vendor'       : "${organization}",
					'Implementation-Timestamp'    : new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
					)
		}
	}
	
	tasks.withType(GenerateModuleMetadata) {
		enabled = false
	}
}
